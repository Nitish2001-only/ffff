<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Product Detail - Ganajan Krushi Seva</title>
  <style>
    body {
      font-family: 'Segoe UI', sans-serif;
      margin: 0;
      padding: 20px;
      background: #f9f9f9;
    }

    h2 {
      margin-top: 0;
    }

    label {
      display: block;
      margin: 15px 0 5px;
      font-weight: bold;
    }

    input {
      width: 100%;
      padding: 10px;
      font-size: 16px;
      border-radius: 6px;
      border: 1px solid #ccc;
    }

    .actions {
      margin-top: 25px;
      display: flex;
      justify-content: space-between;
    }

    button {
      padding: 10px 18px;
      font-size: 16px;
      border: none;
      border-radius: 6px;
      cursor: pointer;
    }

    .edit {
      background: #007bff;
      color: white;
    }

    .delete {
      background: #dc3545;
      color: white;
    }

    .save {
      background: #28a745;
      color: white;
    }

    .cancel {
      background: #ccc;
      color: #333;
    }

    .toast {
      position: fixed;
      bottom: 80px;
      left: 50%;
      transform: translateX(-50%);
      background: rgba(0, 0, 0, 0.7);
      color: white;
      padding: 10px 20px;
      border-radius: 6px;
      font-size: 14px;
      display: none;
      z-index: 1001;
    }

    .back-button {
      position: fixed;
      top: 20px;
      left: 20px;
      background: transparent;
      border: none;
      font-size: 22px;
      cursor: pointer;
    }

    input[readonly] {
      background-color: #eee;
      cursor: default;
    }
  </style>
</head>
<body>

  <button class="back-button" onclick="window.location.href='index.html'">‚Üê</button>
  <h2>Product Detail</h2>

  <form id="productForm">
    <label>Product Name*</label>
    <input type="text" id="product" readonly>

    <label>Company Name*</label>
    <input type="text" id="company" readonly>

    <label>Cost (‚Çπ)</label>
    <input type="text" id="cost" readonly>

    <label>Cash (‚Çπ)</label>
    <input type="text" id="cash" readonly>

    <label>Credit (‚Çπ)</label>
    <input type="text" id="credit" readonly>

    <div class="actions" id="viewActions">
      <button type="button" class="edit" onclick="enableEdit()">Edit</button>
      <button type="button" class="delete" onclick="deleteProduct()">Delete</button>
    </div>

    <div class="actions" id="editActions" style="display:none">
      <button type="button" class="save" onclick="saveChanges()">Save</button>
      <button type="button" class="cancel" onclick="disableEdit()">Cancel</button>
    </div>
  </form>

  <div class="toast" id="toast"></div>

  <script>
    const API_URL = 'https://script.google.com/macros/s/AKfycbzqGdo0RgZiT2bDiOV6LZ2P8R3XM6DXqxQv0t-NTK880vhhAf-I-0x0L3PivqROsSbkkA/exec';
    const row = new URLSearchParams(window.location.search).get('row');
    let productData;

    function showToast(msg) {
      const toast = document.getElementById('toast');
      toast.innerText = msg;
      toast.style.display = 'block';
      setTimeout(() => toast.style.display = 'none', 2000);
    }

    function loadProduct() {
      const data = JSON.parse(localStorage.getItem('products') || '[]');
      productData = data.find(p => p.row == row);
      if (!productData) {
        showToast("Product not found");
        return;
      }

      document.getElementById('product').value = productData.product || '';
      document.getElementById('company').value = productData.company || '';
      document.getElementById('cost').value = productData.cost || '';
      document.getElementById('cash').value = productData.cash || '';
      document.getElementById('credit').value = productData.credit || '';
    }

    function enableEdit() {
      document.querySelectorAll('input').forEach(inp => inp.removeAttribute('readonly'));
      document.getElementById('viewActions').style.display = 'none';
      document.getElementById('editActions').style.display = 'flex';
    }

    function disableEdit() {
      loadProduct();
      document.querySelectorAll('input').forEach(inp => inp.setAttribute('readonly', true));
      document.getElementById('viewActions').style.display = 'flex';
      document.getElementById('editActions').style.display = 'none';
    }

    async function saveChanges() {
      const code = prompt("Enter Admin Code");
      if (!code) return showToast("Admin code required");

      const updated = {
        row: Number(row),
        product: document.getElementById('product').value.trim(),
        company: document.getElementById('company').value.trim(),
        cost: document.getElementById('cost').value.trim(),
        cash: document.getElementById('cash').value.trim(),
        credit: document.getElementById('credit').value.trim(),
        code
      };

      if (!updated.product || !updated.company) {
        return showToast("Product and Company are required");
      }

      try {
        const res = await fetch(API_URL, {
          method: 'PUT',
          body: JSON.stringify(updated),
          headers: { 'Content-Type': 'application/json' }
        });

        const result = await res.json();

        if (result.success) {
          showToast("‚úÖ Product updated");
          const cached = JSON.parse(localStorage.getItem('products') || '[]');
          const idx = cached.findIndex(p => p.row == row);
          if (idx !== -1) cached[idx] = { ...updated, row: Number(row), timestamp: new Date().toISOString() };
          localStorage.setItem('products', JSON.stringify(cached));
          disableEdit();
        } else {
          showToast("‚ùå " + result.message);
        }
      } catch (err) {
        showToast("Network error");
        console.error(err);
      }
    }

    async function deleteProduct() {
      if (!confirm("Are you sure you want to delete this product?")) return;
      if (!confirm("‚ö† This action is irreversible. Confirm again.")) return;

      const code = prompt("Enter Admin Code to delete");
      if (!code) return showToast("Admin code required");

      try {
        const res = await fetch(API_URL, {
          method: 'DELETE',
          body: JSON.stringify({ row: Number(row), code }),
          headers: { 'Content-Type': 'application/json' }
        });

        const result = await res.json();
        if (result.success) {
          showToast("üóëÔ∏è Product deleted");
          const cached = JSON.parse(localStorage.getItem('products') || '[]');
          const updated = cached.filter(p => p.row != row);
          localStorage.setItem('products', JSON.stringify(updated));
          setTimeout(() => window.location.href = 'index.html', 1000);
        } else {
          showToast("‚ùå " + result.message);
        }
      } catch (err) {
        showToast("Delete failed");
        console.error(err);
      }
    }

    window.onload = loadProduct;
  </script>
</body>
</html>
